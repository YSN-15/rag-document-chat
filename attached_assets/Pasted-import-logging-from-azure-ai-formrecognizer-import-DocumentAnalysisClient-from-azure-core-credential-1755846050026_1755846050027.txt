import logging
from azure.ai.formrecognizer import DocumentAnalysisClient
from azure.core.credentials import AzureKeyCredential
from azure.core.exceptions import HttpResponseError
from config import Config

logger = logging.getLogger(__name__)

class DocumentIntelligenceService:
    def __init__(self):
        """Initialize Azure Document Intelligence client"""
        # Handle case where endpoint and key might be swapped in environment
        env_endpoint = Config.AZURE_FORM_RECOGNIZER_ENDPOINT
        env_key = Config.AZURE_FORM_RECOGNIZER_KEY
        
        # Check if values are swapped and correct them
        if env_endpoint and env_key:
            if env_endpoint.startswith('http'):
                self.endpoint = env_endpoint
                self.key = env_key
            else:
                # Values are swapped, correct them
                self.endpoint = env_key
                self.key = env_endpoint
        else:
            raise ValueError("Azure Form Recognizer endpoint and key must be configured")
        
        logger.info(f"Using endpoint: {self.endpoint}")
        
        self.client = DocumentAnalysisClient(
            endpoint=self.endpoint,
            credential=AzureKeyCredential(self.key)
        )
    
    def analyze_receipt(self, file_path):
        """
        Analyze receipt using Azure Document Intelligence
        Returns extracted data in structured format
        """
        try:
            logger.info(f"Analyzing document: {file_path}")
            
            with open(file_path, "rb") as file:
                # Use prebuilt-receipt model for receipt analysis
                poller = self.client.begin_analyze_document(
                    "prebuilt-receipt", 
                    document=file
                )
                result = poller.result()
            
            # Extract structured data
            extracted_data = self._extract_receipt_data(result)
            
            logger.info("Document analysis completed successfully")
            return extracted_data
            
        except HttpResponseError as e:
            logger.error(f"Azure Document Intelligence API error: {str(e)}")
            raise Exception(f"Document analysis failed: {str(e)}")
        except Exception as e:
            logger.error(f"Error analyzing document: {str(e)}")
            raise Exception(f"Document analysis failed: {str(e)}")
    
    def _extract_receipt_data(self, result):
        """Extract structured data from Azure Document Intelligence result"""
        extracted_data = {
            'invoiceId': None,
            'customerName': None,
            'customerAddress': None,
            'customerPhoneNumber': None,
            'vendorName': None,
            'vendorAddress': None,
            'vendorTaxId': None,
            'invoiceDate': None,
            'items': [],
            'subTotal': None,
            'totalTax': None,
            'totalDue': None
        }
        
        try:
            # Process each document (usually just one for receipts)
            for document in result.documents:
                fields = document.fields
                
                # Extract basic receipt information
                if "ReceiptType" in fields:
                    extracted_data['receiptType'] = fields["ReceiptType"].value
                
                if "TransactionDate" in fields:
                    extracted_data['invoiceDate'] = str(fields["TransactionDate"].value)
                
                if "TransactionTime" in fields:
                    extracted_data['transactionTime'] = str(fields["TransactionTime"].value)
                
                # Extract merchant information
                if "MerchantName" in fields:
                    extracted_data['vendorName'] = fields["MerchantName"].value
                
                if "MerchantAddress" in fields:
                    extracted_data['vendorAddress'] = fields["MerchantAddress"].value
                
                if "MerchantPhoneNumber" in fields:
                    extracted_data['vendorPhoneNumber'] = fields["MerchantPhoneNumber"].value
                
                # Extract totals
                if "Subtotal" in fields:
                    extracted_data['subTotal'] = fields["Subtotal"].value
                
                if "TotalTax" in fields:
                    extracted_data['totalTax'] = fields["TotalTax"].value
                
                if "Total" in fields:
                    extracted_data['totalDue'] = fields["Total"].value
                
                # Extract line items
                if "Items" in fields:
                    items = fields["Items"].value
                    for item in items:
                        item_data = {
                            'description': '',
                            'quantity': None,
                            'unitPrice': None,
                            'amount': None,
                            'tax': None
                        }
                        
                        if "Description" in item.value:
                            item_data['description'] = item.value["Description"].value
                        
                        if "Quantity" in item.value:
                            item_data['quantity'] = item.value["Quantity"].value
                        
                        if "Price" in item.value:
                            item_data['unitPrice'] = item.value["Price"].value
                        
                        if "TotalPrice" in item.value:
                            item_data['amount'] = item.value["TotalPrice"].value
                        
                        extracted_data['items'].append(item_data)
                
                # If no items found, try to extract from tables
                if not extracted_data['items']:
                    extracted_data['items'] = self._extract_items_from_tables(result)
        
        except Exception as e:
            logger.error(f"Error extracting receipt data: {str(e)}")
            # Return partial data even if extraction fails
        
        # Add raw text for Groq analysis
        try:
            raw_text = ""
            for page in result.pages:
                for line in page.lines:
                    raw_text += line.content + "\n"
            extracted_data['raw_text'] = raw_text
        except Exception as e:
            logger.warning(f"Failed to extract raw text: {str(e)}")
            extracted_data['raw_text'] = ""
        
        return extracted_data
    
    def _extract_items_from_tables(self, result):
        """Extract items from table structures if line items not found"""
        items = []
        
        try:
            for table in result.tables:
                # Look for table headers to identify columns
                headers = []
                if table.cells:
                    # Get first row as headers
                    first_row_cells = [cell for cell in table.cells if cell.row_index == 0]
                    headers = [cell.content.lower() for cell in first_row_cells]
                
                # Process remaining rows as data
                for row_idx in range(1, table.row_count):
                    row_cells = [cell for cell in table.cells if cell.row_index == row_idx]
                    
                    if len(row_cells) >= 2:  # At least description and amount
                        item_data = {
                            'description': row_cells[0].content if row_cells else '',
                            'quantity': None,
                            'unitPrice': None,
                            'amount': None,
                            'tax': None
                        }
                        
                        # Try to extract amount from last column
                        if row_cells:
                            last_cell = row_cells[-1].content
                            try:
                                # Try to parse as float (remove currency symbols)
                                amount_str = last_cell.replace('â‚¹', '').replace(',', '').strip()
                                item_data['amount'] = float(amount_str)
                            except ValueError:
                                pass
                        
                        items.append(item_data)
        
        except Exception as e:
            logger.error(f"Error extracting items from tables: {str(e)}")
        
        return items
